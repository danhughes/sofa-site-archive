<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
	<title>SOFA - The Sleeping Barber</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta http-equiv="imagetoolbar" content="no">
	<meta name="viewport" content="width = 1100">
	
	<!-- GOOGLE -->
	<meta name="keywords" content="interface, icons, design, software, macintosh, mac, amsterdam, versions, checkout">
	<meta name="description" content="Sofa is a software and interaction design company. We develop products and help others design theirs.">

	<!-- CSS -->
	<!-- TODO: It's better to merge these into one -->
	<link rel="stylesheet" href="http://www.madebysofa.com/media/css/reset.css" type="text/css" media="screen" charset="utf-8">
	<link rel="stylesheet" href="http://www.madebysofa.com/media/css/post.css" type="text/css" media="screen" charset="utf-8">

	<!-- RSS -->
	<link rel="alternate" type="application/rss+xml" title="RSS" href="http://feeds.feedburner.com/madebysofa">
	
	<!-- JQuery -->
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" charset="utf-8"></script>

	<!-- Code Prettify -->
	<script src="http://www.madebysofa.com/media/prettify/prettify.js" type="text/javascript"></script>
	<link rel="stylesheet" href="http://www.madebysofa.com/media/prettify/prettify.css" type="text/css">
	
	<!-- No text widows -->
	<script src="http://www.madebysofa.com/media/js/jquery.widont.js" type="text/javascript"></script>
	
	<script src="http://www.madebysofa.com/media/js/retweet.js" type="text/javascript"></script>
	
	<script type="text/javascript" charset="utf-8">
		$(document).ready(function () {
			
			// Change the links in the post navigation bar
			$(".previous a").hover(
				function() {$(".previous_title").fadeIn(100)},
				function() {$(".previous_title").fadeOut(100)}
			);

			$(".next a").hover(
				function() {$(".next_title").fadeIn(100)},
				function() {$(".next_title").fadeOut(100)}
			);
			
			// Replace the space between the last two words in every paragraph with a non breaking 
			// space so we avoid having orphans: http://en.wikipedia.org/wiki/Widows_and_orphans
			$(".post p, .post li, .post h1, .post h2").widont();
			
			// Make code look nice with syntax coloring
			prettyPrint();
		
		});
	</script>

	<!-- GOOGLE ANALYTICS -->
	<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-1807788-2']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script');
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		ga.setAttribute('async', 'true');
		document.documentElement.firstChild.appendChild(ga);
	})();
</script>

	<!-- TYPEKIT -->	
	<script type="text/javascript" src="http://use.typekit.com/gdn6pnx.js"></script>
	<script type="text/javascript">try{Typekit.load();}catch(e){}</script>

	<!--[if IE 6]>
		<link rel="stylesheet" href="http://www.madebysofa.com/media/css/ie-6.css" type="text/css" media="screen" charset="utf-8">
	<![endif]-->

	<!--[if IE 7]>
		<link rel="stylesheet" href="http://www.madebysofa.com/media/css/ie-7.css" type="text/css" media="screen" charset="utf-8">
	<![endif]-->

</head>
<body>
	<div id="wrap">
		<div class="header">
			<img class="logo" src="http://www.madebysofa.com/media/img/sofa_logo.gif" width="53" height="39" alt="Sofa Logo">
			<h1>Sofa&#39;s blog about design, code <img class="ampersand" src="http://www.madebysofa.com/media/img/ampersand.gif" width="17" height="18" alt="Ampersand"> everything else.</h1>
			<div class="links">
				<a href="/">www.madebysofa.com</a>
				<a class="blog" href="/blog">/blog</a>
			</div>
		<div class="clear"></div>
		</div>

		<div class="bar">
			<p>
				<span class="previous">
					
					<a href="../blog/crunchtime"><span class="lucida">&laquo;</span> Previous</a> <span class="previous_title"> Crunchtime</span>
					
				</span>
				
				<span class="date">
					
					Monday the 28<sup>th</sup> <em>of</em> September, 2009
					
				</span>
				
				<span class="next">
					
					<span class="next_title">Managing EnStore </span><a href="../blog/managing-enstore">Next <span class="lucida"> &raquo;</span></a>
					
				</span>
			</p>
		</div>

		<div class="clear"></div>

		<div class="post">
			<div class="left_col">
				<h2 class="tk-league-gothic">The Sleeping Barber&nbsp;</h2>
				<h3 class="author"><em>by</em> Jonathan Dann</h3>
				<p class="intro">Developers often say, threading is hard. I disagree. Threading isn&#39;t hard, concurrency is hard.</p>
				
				
			</div>
			<div class="right_col">
				<p>With the release of Snow Leopard Apple introduced Grand Central Dispatch, a library designed to ease the inherent difficulties in writing concurrent applications. For the non-developers reading this, you may be surprised to know that making an application do more than one thing at a time (reliably) is a difficult problem to solve as the complexity of the application increases. Computer science students are gradually introduced to the concepts of multitasking, and one of the engineering problems often used in teaching is the &lsquo;sleeping barber problem&rsquo;.</p>

<p>The sleeping barber problem is described well on <a href="http://en.wikipedia.org/wiki/Sleeping_barber_problem">Wikipedia</a>. It can be summarized with a few statements:</p>

<div class="list">
	<ul>
		<li>The barber shop has a limited number of waiting chairs.</li>
		<li>When there are no waiting chairs, customers are turned away.</li>
		<li>The barber can only cut one customer&#39;s hair at a time.</li>
		<li>The barber should sleep when there are no customers.</li>
	</ul>
</div>

<h2>The Waiting Room</h2>
<p>We can think of the waiting chairs as a queue of customers, but we need to limit the number of items in the queue to a maximum number.</p>

<p>GCD allows us to use one of the three global concurrent queues which execute tasks concurrently, whereas any queues that we create ourselves are serial queues. We can create a serial queue to represent our chairs, but we need to limit the number of items in the queue to a maximum number, for our purposes we&#39;ll have 3 waiting chairs in the shop. To do this we&#39;ll use a dispatch semaphore.</p>

<h2>Dispatch Semaphores</h2>

<p>Semaphores in GCD allow you to manage access of threads to finite resources. They have a key performance advantage over posix semaphores in that they don&#39;t call into the kernel if the resource is available, so they&#39;re fast. Semaphores allow you to initialize them with a value, which we use to represent the number of chairs in the waiting room. When a customer walks into the shop we call <code>dispatch_semaphore_wait()</code>, which attempts to decrement the semaphore. If the value of the semaphore is greater than zero, then a chair is free and the customer takes a seat. If the semaphore is already at zero then all the chairs are taken, in which case <code>dispatch_semaphore_wait()</code> return value is non-zero and we can turn away the customer.</p>

<p>The key to dispatch semaphores is the timeout value. Passing <code>DISPATCH_TIME_FOREVER</code> will cause any thread to wait until the value of the semaphore moves above zero and and a seat is available. If we did this our customers would be queueing up outside our shop prior to taking a seat in the waiting room. Instead we pass <code>DISPATCH_TIME_NOW</code> so we can see if a chair is immediately available by testing the return value of <code>dispatch_semaphore_wait()</code>. The customer sees that no space is available and walks away.</p>

<h2>The Barber</h2>
<p>Consider now that we have any number of seats taken by waiting customers. How do we get the barber to do some work? The first thought may be to use another semaphore, a binary one this time, and signal the barber that he has work to do. That&#39;s too much work. Instead we create another serial queue, and call this queue the barber. When a customer takes a seat all we have to do is add a new task (shave and a haircut) onto the barber&#39;s list of jobs. When a barber begins his next task, we signal the semaphore that a waiting chair has become available.</p>

<p>As the barber is a GCD queue, when there&#39;s no work available, libdispatch takes care of managing resources and putting the queue to sleep if necessary.</p>

<p>All in all we&#39;ve implemented a complete solution to the barbershop problem, without logging what&#39;s going on (and depending on your formatting) the bulk is about 18 lines of code (<a href="http://blog.bestinclass.dk/index.php/2009/09/scala-vs-clojure-round-2-concurrency/">whooping Scala and beating even Clojure</a>):</p>

<pre class="prettyprint">
int main (int argc, const char * argv[]) {
    dispatch_queue_t waitingChairs = dispatch_queue_create(&quot;com.madebysofa.waitingChairs&quot;, 0);
    dispatch_queue_t barber = dispatch_queue_create(&quot;com.madebysofa.barber&quot;, 0);    
    dispatch_semaphore_t semaphore = dispatch_semaphore_create((long)3);
    NSInteger index = -1;

    while (YES) {
        index++;
        long success = dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW);
        if (success != 0) {
            NSLog(@&quot;Customer turned away %i&quot;, index);
            continue;
        }
        dispatch_async(waitingChairs, ^{
            NSLog(@&quot;Customer taking a seat %i&quot;, index);
            dispatch_async(barber, ^{
                dispatch_semaphore_signal(semaphore);
                NSLog(@&quot;Shave and a haircut %i&quot;, index);
            });
        });        
    }
    dispatch_release(waitingChairs);
    dispatch_release(barber);
    dispatch_release(semaphore);
    return 0;
}
</pre>

<h2>Creative Interpretation</h2>

<p>That&#39;s all well and good, but we can go a step further. If the customers don&#39;t do anything while they&#39;re seated, we can again take advantage of the FIFO nature of GCD queues and lose the barber queue altogether. In this case we can simply enqueue a maximum of 3 work units onto our "waiting" queue, and they&#39;ll be executed serially anyway. The code then becomes:</p>

<pre class="prettyprint">
int main (int argc, const char * argv[]) {
    dispatch_queue_t waitingChairs = dispatch_queue_create(&quot;com.madebysofa.waitingChairs&quot;, 0);
    dispatch_semaphore_t semaphore = dispatch_semaphore_create((long)3);
    NSInteger index = -1;
    
    while (YES) {
        index++;
        long success = dispatch_semaphore_wait(semaphore, DISPATCH_TIME_NOW);
        if (success != 0) {
            NSLog(@&quot;Customer turned away %i&quot;, index);
            continue;
        }
        dispatch_async(waitingChairs, ^{
            dispatch_semaphore_signal(semaphore);
            NSLog(@&quot;Shave and a haircut %i&quot;, index);
        });        
    }

    dispatch_release(waitingChairs);
    dispatch_release(semaphore);
    return 0;
}
</pre>

<p>You could still create the barber queue and call <code>dispatch_set_target_queue(waitingQueue, barberQueue)</code> which will mean that as an item is dequeued from the waiting queue it gets executed on the barber queue, but there&#39;s little point, until we create more waiting rooms that is. By creating more waiting rooms, we can set all their target queues to the barber and we can "funnel" work through the barber queue.</p>

<p>Our original implementation has a key advantage though: while seated the customer can do some work which is guaranteed to complete before the "shave and a haircut" is dispatched to the barber. In our sample code, this "work" is the <code>NSLog(@"Customer taking a seat")</code>, but you can imagine a long calculation taking place in preparation for the haircut.</p>

<h2>Final Thoughts</h2>
<p>Developers often say, "threading is hard". I disagree. Threading isn&#39;t hard, <em>concurrency</em> is hard. Threading is just learning a new set of functions.  What Apple have done with GCD is to give us an abstraction for threads, which also makes managing concurrency far easier. Moreso, where people have created functional programming languages like Scala and Clojure to address the concurrency problem, GCD (and blocks) is all just C. There is real power in that simplicity. We can approach problems from a functional standpoint using a procedural language, and more concisely even than I can describe it.</p>
			</div>
		</div>

<div class="clear"></div>

<div class="footer_bar">
	
	<p>You read <span>The Sleeping Barber</span> written by <a href="http://twitter.com/jonathandann" class="author">Jonathan Dann</a>.</p>
	<div class="links">
		<a href="http://feeds.feedburner.com/madebysofa" style="margin-right:6px;">Feed</a>
		<a class="retweet self" href="">Tweet</a>
	</div>
</div>

		<script type="text/javascript" charset="utf-8">
			
			// Versions twitter message
			$.getJSON("http://twitter.com/status/user_timeline/versionsapp.json?count=3&callback=?", function(data) {
				$(".versions ul").html("");
			
				for (i=0;i<2;i++) {
					$(".versions ul").append("<li><a href=\"http://twitter.com/versionsapp/status/" + data[i]['id'] + "\">" + data[i]['text'] + "</a> <span> (" + data[i]['created_at'].substring(4, 11) +  ")</span></li>")
				}
			})
			
			
			
			// Enstore tumbr news feed
			$.getJSON("http://enstore.tumblr.com/api/read/json?callback=?",
				function(data) {
				
					$(".enstore ul").html("");
				
					for (i=0;i<3;i++) {
						$(".enstore ul").append("<li><a href=\"" + data.posts[i]['url-with-slug'] + "\">" + data.posts[i]['regular-title'] + "</a> <span> (" + data.posts[i]['date'].split(", ")[1].substring(0, 11) +  ")</span></li>")
					}
				});
			
			// Checkout tumbr news feed
			$.getJSON("http://checkoutapp.tumblr.com/api/read/json?callback=?",
				function(data) {
				
					$(".checkout ul").html("");
				
					for (i=0;i<3;i++) {
						$(".checkout ul").append("<li><a href=\"" + data.posts[i]['url-with-slug'] + "\">" + data.posts[i]['regular-title'] + "</a> <span> (" + data.posts[i]['date'].split(", ")[1].substring(0, 11) +  ")</span></li>")
					}
				});

		
		</script>

		<div class="news versions">
			<div class="wrap">
				<img class="icon" src="http://www.madebysofa.com/media/img/blog/versions_small.png" width="35" height="34" alt="Versions Icon">
				<h4>Versions <span>News</span></h4>
			</div>
			<ul><li>Loading...</li></ul>
			<p>Follow <a href="http://www.twitter.com/versionsapp">@versionsapp</a> on Twitter.</p>
		</div>
		<div class="news checkout">
			<div class="wrap">
				<img class="icon" src="http://www.madebysofa.com/media/img/blog/checkout_small.png" width="35" height="34" alt="Versions Icon">
				<h4>Checkout <span>News</span></h4>
			</div>
			<ul><li>Loading...</li></ul>
			<p>Follow <a href="http://twitter.com/checkoutapp">@checkoutapp</a> on Twitter.</p>
		</div>
		<div class="news enstore">
			<div class="wrap">
				<img class="icon" src="http://www.madebysofa.com/media/img/blog/enstore_small.png" width="35" height="34" alt="Versions Icon">
				<h4>Enstore <span>News</span></h4>
			</div>
			<ul><li>Loading...</li></ul>
			<p>Follow <a href="http://twitter.com/enstore">@enstore</a> on Twitter.</p>
		</div>

		<div class="clear">&nbsp;</div>
		
		<div id="footer"><small>Copyright &copy; 2008&ndash;2011 madebysofa holding BV.</small></div>
		
	</div>
	<!-- <script type="text/javascript" src="http://www.observerapp.com/record.js" async defer></script>
<script type="text/javascript">
try {
	Observerapp.record("agtvYnNlcnZlcmFwcHINCxIEU2l0ZRjB4-QBDA");
} catch (e) {
	
}
</script> -->
</body>
</html>